### Starting build.
# Target: exceptions.ml.depends, tags: { package(ppx_deriving.std), extension:ml, file:exceptions.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ppx_deriving.std -modules exceptions.ml > exceptions.ml.depends # cached
# Target: StringSetMap.ml.depends, tags: { package(ppx_deriving.std), extension:ml, file:StringSetMap.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ppx_deriving.std -modules StringSetMap.ml > StringSetMap.ml.depends # cached
# Target: Util.ml.depends, tags: { package(ppx_deriving.std), extension:ml, file:Util.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ppx_deriving.std -modules Util.ml > Util.ml.depends # cached
# Target: Util.cmo, tags: { package(ppx_deriving.std), byte, compile, extension:cmo, extension:ml, file:Util.cmo, file:Util.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ppx_deriving.std -o Util.cmo Util.ml # cached
# Target: StringSetMap.cmo, tags: { package(ppx_deriving.std), byte, compile, extension:cmo, extension:ml, file:StringSetMap.cmo, file:StringSetMap.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ppx_deriving.std -o StringSetMap.cmo StringSetMap.ml # cached
# Target: exceptions.cmo, tags: { package(ppx_deriving.std), byte, compile, extension:cmo, extension:ml, file:exceptions.cmo, file:exceptions.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ppx_deriving.std -o exceptions.cmo exceptions.ml # cached
# Target: exceptions.byte, tags: { package(ppx_deriving.std), byte, dont_link_with, extension:byte, file:exceptions.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package ppx_deriving.std Util.cmo StringSetMap.cmo exceptions.cmo -o exceptions.byte
# Compilation successful.
